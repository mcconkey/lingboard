{"version":3,"sources":["listItems.js","styles/styles.js","components/SideNavigation.js","components/HeaderBar.js","Title.js","atoms/ledgerAtom.tsx","selectors/ledgerSelector.tsx","components/RecentLedgerUpdates.js","atoms/rosterAtom.tsx","components/ReadingScoresChart.js","components/ListeningScoresChart.js","components/LinguistLanguageHours.tsx","components/LanguageHoursChart.tsx","components/HomeScreen.js","classes/Linguist.ts","utility/utilities.ts","screens/LoadLedger.js","components/LinguistHistory.tsx","components/LinguistHistoryChart.tsx","screens/Linguist.js","screens/Roster.js","screens/Dashboard.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["mainListItems","ListItem","button","component","Link","to","ListItemIcon","ListItemText","primary","useStyles","makeStyles","theme","root","display","toolbar","paddingRight","toolbarIcon","alignItems","justifyContent","padding","mixins","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","menuButton","marginRight","menuButtonHidden","title","flexGrow","drawerPaper","position","whiteSpace","width","enteringScreen","drawerPaperClose","overflowX","spacing","breakpoints","up","appBarSpacer","content","height","overflow","container","paddingTop","paddingBottom","paper","flexDirection","fixedHeight","SideNavigation","React","useState","open","classes","Drawer","variant","clsx","className","Divider","List","HeaderBar","AppBar","appBarShift","Toolbar","Typography","color","noWrap","Title","props","gutterBottom","children","ledgerState","atom","key","default","latestLedgerState","selector","get","ledger","length","slice","displayChange","rowArray","changesString","omitAttribs","attrib","includes","RecentLedgerHistory","data","useRecoilValue","Fragment","Table","size","TableHead","TableRow","TableCell","TableBody","map","row","id","timestamp","firstName","lastName","rosterState","COLORS","RADIAN","Math","PI","renderCustomizedLabel","cx","cy","midAngle","innerRadius","outerRadius","percent","radius","index","x","cos","y","sin","fill","textAnchor","dominantBaseline","toFixed","ScoresChart","readingData","roster","scoreBuckets","name","value","Object","entries","linguist","attributes","hasOwnProperty","readingScore","Number","reading","totalScores","dataKey","labelLine","label","entry","verticalAlign","ListeningScoresChart","listeningData","listeningScore","listening","Period","LanguageHoursChart","buckets","ledgerRows","hourBuckets","i","bucket","hours","month","moment","subtract","format","push","trainingHours","rowMonth","parseInt","strokeDasharray","reversed","HomeScreen","fixedHeightPaper","Grid","item","xs","md","lg","Paper","RecentLedgerUpdates","Linguist","this","rows","extractAttributesFromRow","attribs","date","rowTimestamp","toString","unix","undefined","toUrl","text","toLowerCase","replace","buildRoster","dataArray","keys","appendToLedger","setName","LoadLedger","useRecoilState","setLedger","setRoster","loadedData","setLoadedData","useEffect","onDrop","forEach","nanoid","onError","err","file","inputElem","reason","console","log","addRemoveButton","onRemoveFile","config","header","LinguistHistory","ledgerHasRows","style","fontWeight","LinguistLanguageHours","setHours","ALL_TIME","period","setPeriod","setPeriodButtonHandler","p","currentMonth","Date","getMonth","total","fontSize","marginTop","ButtonGroup","fullWidth","aria-label","Button","THIS_MONTH","onClick","LinguistHistoryChart","unixTime","score","type","domain","tickFormatter","datetime","ticks","formatter","line","shape","linguistKey","useParams","linguistNotFound","Roster","isRoster","table","nextSLTE","Copyright","align","getFullYear","Dashboard","CssBaseline","Container","maxWidth","path","Box","pt","App","Boolean","window","location","hostname","match","rootElement","document","getElementById","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bbcd38da.chunk.js","sourcesContent":["import React from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport PeopleIcon from '@material-ui/icons/People';\nimport BarChartIcon from '@material-ui/icons/BarChart';\nimport LayersIcon from '@material-ui/icons/Layers';\nimport { Link } from 'react-router-dom';\n\nexport const mainListItems = (\n  <div>\n    <ListItem button\n      component={Link}\n      to=\"/\" >\n      <ListItemIcon>\n        <DashboardIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Dashboard\" />\n    </ListItem>\n    <ListItem button\n      component={Link}\n      to=\"/roster\" >\n      <ListItemIcon>\n        <PeopleIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Linguist Roster\" />\n    </ListItem>\n    <ListItem button\n      component={Link}\n      to=\"/load\">\n      <ListItemIcon>\n        <BarChartIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Load Ledger\" />\n    </ListItem>\n    <ListItem button\n      component={Link}\n      to=\"/save\">\n      <ListItemIcon>\n        <LayersIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Save Ledger\" />\n    </ListItem>\n  </div>\n);","import { makeStyles } from '@material-ui/core/styles';\n\nconst drawerWidth = 240;\n\nconst getDrawerWidth = () => {\n    return drawerWidth;\n};\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      display: 'flex',\n    },\n    toolbar: {\n      paddingRight: 24, // keep right padding when drawer closed\n    },\n    toolbarIcon: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'flex-end',\n      padding: '0 8px',\n      ...theme.mixins.toolbar,\n    },\n    appBar: {\n      zIndex: theme.zIndex.drawer + 1,\n      transition: theme.transitions.create(['width', 'margin'], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n    },\n    // appBarShift: {\n    //   marginLeft: drawerWidth,\n    //   width: `calc(100% - ${drawerWidth}px)`,\n    //   transition: theme.transitions.create(['width', 'margin'], {\n    //     easing: theme.transitions.easing.sharp,\n    //     duration: theme.transitions.duration.enteringScreen,\n    //   }),\n    // },\n    menuButton: {\n      marginRight: 36,\n    },\n    menuButtonHidden: {\n      display: 'none',\n    },\n    title: {\n      flexGrow: 1,\n    },\n    drawerPaper: {\n      position: 'relative',\n      whiteSpace: 'nowrap',\n      width: drawerWidth,\n      transition: theme.transitions.create('width', {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n    },\n    drawerPaperClose: {\n      overflowX: 'hidden',\n      transition: theme.transitions.create('width', {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n      width: theme.spacing(7),\n      [theme.breakpoints.up('sm')]: {\n        width: theme.spacing(9),\n      },\n    },\n    appBarSpacer: theme.mixins.toolbar,\n    content: {\n      flexGrow: 1,\n      height: '100vh',\n      overflow: 'auto',\n    },\n    container: {\n      paddingTop: theme.spacing(4),\n      paddingBottom: theme.spacing(4),\n    },\n    paper: {\n      padding: theme.spacing(2),\n      display: 'flex',\n      overflow: 'auto',\n      flexDirection: 'column',\n    },\n    fixedHeight: {\n      height: 240,\n    },\n  }));\n  \nexport default useStyles; \n","import React from 'react';\nimport { Drawer, Divider, List,  } from '@material-ui/core';\nimport clsx from 'clsx';\nimport { mainListItems } from '../listItems';\n//import ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport useStyles from '../styles/styles';\n\n\nfunction SideNavigation() {\n  const [open, setOpen] = React.useState(true);\n  // const handleDrawerOpen = () => {\n  //   setOpen(true);\n  // };\n  // const handleDrawerClose = () => {\n  //   setOpen(false);\n  // };\n\n  const classes = useStyles();\n  return (\n    <Drawer\n        variant=\"permanent\"\n        classes={{\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\n        }}\n        open={open}\n      >\n        <div className={classes.toolbarIcon}>\n          {/* <IconButton onClick={handleDrawerClose}>\n            <ChevronLeftIcon />\n          </IconButton> */}\n        </div>\n        <Divider />\n        <List>{mainListItems}</List>\n        \n      </Drawer>\n  );\n}\n\nexport default SideNavigation;","import React from 'react';\nimport clsx from 'clsx';\nimport useStyles from '../styles/styles'\nimport { AppBar, \n         Toolbar, \n\n         Typography, \n\n         } from '@material-ui/core/';\n\n\n\nconst HeaderBar =  () => {\n    // eslint-disable-next-line no-unused-vars\n    const [open, setOpen] = React.useState(true);\n    // const handleDrawerOpen = () => {\n    //   setOpen(true);\n    // };\n    // const handleDrawerClose = () => {\n    //   setOpen(false);\n    // };\n    const classes = useStyles();\n\n    return(\n        <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\n        <Toolbar className={classes.toolbar}>\n          {/* <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\n          >\n            <MenuIcon />\n          </IconButton> */}\n          <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n            Linguist Dashboard\n          </Typography>\n          {/* <IconButton color=\"inherit\">\n            <Badge badgeContent={4} color=\"secondary\">\n              <NotificationsIcon />\n            </Badge>\n          </IconButton> */}\n        </Toolbar>\n      </AppBar>\n    );\n\n};\n\nexport default HeaderBar;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\n\nexport default function Title(props) {\n  return (\n    <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\n      {props.children}\n    </Typography>\n  );\n}\n\nTitle.propTypes = {\n  children: PropTypes.node,\n};\n","import { atom } from 'recoil';\n\nexport const ledgerState = atom({\n    key: 'ledger',\n    default:  [],\n  });\n","import { selector } from 'recoil';\nimport { ledgerState } from '../atoms/ledgerAtom';\n\nexport const latestLedgerState = selector({\n    key: 'latestLedgerState',\n    get: ({get}) => {\n      const ledger: any = get(ledgerState);\n      if(ledger.length > 5){\n        return ledger.slice(-5);\n      }else{\n        return ledger;\n      }\n    },\n  });","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Title from '../Title';\nimport { useRecoilValue } from 'recoil';\nimport { latestLedgerState } from '../selectors/ledgerSelector';\n\n\nconst RecentLedgerHistory = () => {\n\n  //const data = useRecoilValue(ledgerState);\n  const data = useRecoilValue(latestLedgerState);\n\n\n  if(data.length < 1){\n    return (<></>);\n  }\n  return (\n    <React.Fragment>\n      <Title>Recent Ledger Entries</Title>\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Date</TableCell>\n            <TableCell>Name</TableCell>\n            <TableCell>Changes</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {data.length && data.map((row) => (\n            <TableRow key={row.id}>\n              <TableCell>{row.data.timestamp}</TableCell>\n              <TableCell>{row.data.firstName + \" \" + row.data.lastName}</TableCell>\n              <TableCell>{displayChange(row.data)}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </React.Fragment>\n  );\n};\n\nconst displayChange = (rowArray) => {\n  let changesString = \"\";\n  let omitAttribs = ['timestamp', 'firstName', 'lastName'];\n  for (const attrib in rowArray) {\n   // console.log(attrib);\n    if(!omitAttribs.includes(attrib)){\n      if(rowArray[attrib] !== \"\"){\n        changesString += ` ${attrib}: ${rowArray[attrib]}` ;\n      }\n    }\n  }\n  return changesString;\n};\n\nexport default RecentLedgerHistory;","import { atom } from 'recoil';\n\nexport const rosterState = atom({\n    key: 'rosterState',\n    default: {},\n        \n});","import React from 'react';\nimport { PieChart, Pie, Cell, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport Title from '../Title';\n\nimport { useRecoilValue } from 'recoil';\nimport { rosterState } from '../atoms/rosterAtom';\n\nconst COLORS = ['#FF3032',   // less than 2\n                '#FFBB28',  // 2\n                '#00C49F',  // 2+\n                '#0088FE']; // 3\n\nconst RADIAN = Math.PI / 180;\nconst renderCustomizedLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent, index }) => {\n \tconst radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n    const x  = cx + radius * Math.cos(-midAngle * RADIAN);\n    const y = cy  + radius * Math.sin(-midAngle * RADIAN);\n\n    //don't put a lable on empty data sets\n    if(percent === 0){\n        return (<></>);\n    }\n \n  return (\n    <text x={x} y={y} fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n    \t{`${(percent * 100).toFixed(0)}%`}\n    </text>\n  );\n};\n/**\n * \n * @param {Object<Linguist>} roster \n * @returns Data scoreBuckets  \n * \n * iterates over roster, extracts scores and saves increments returns an objectArray\n * of scores totaled into a histogram of scores\n */\nconst totalScores = (roster = {}) => {\n    \n    // declare the shape of the histogram and it's buckets\n    let scoreBuckets = [\n        {name: 'SubPro', value: 0},\n        {name: '2', value: 0},\n        {name: '2+', value: 0},\n        {name: '3 or Higher', value: 0}];\n    \n    // don't try any of this if there isn't any linguists on the roster\n    if( Object.entries(roster).length > 0 ){\n\n        // iterate over the array \n        for(var linguist in roster) { // here linguist is the roster key for each linguist\n            \n            // verify that there is a reading score for the lingusit\n            if(roster[linguist].attributes?.hasOwnProperty(\"reading\")){\n\n                // set reading score make sure that score is typed as a Number to facilitate comparision\n                let readingScore = Number(roster[linguist].attributes.reading.value);\n                \n                //increment the correct score bucket\n                if(readingScore < 2){\n                    scoreBuckets[0].value++;\n                }else if(readingScore === 2){\n                    scoreBuckets[1].value++;\n                }else if(readingScore > 2 && readingScore < 3){\n                    scoreBuckets[2].value++;\n                }else if(readingScore > 2.5){\n                    scoreBuckets[3].value++;\n                }\n            }\n        }\n  }\n  \n  return scoreBuckets;\n}\n\nexport default function ScoresChart() {\n\n  const roster = useRecoilValue(rosterState);\n\n  const readingData = totalScores(roster);\n\n  return (\n    <React.Fragment>\n      <Title>Reading</Title>\n      <ResponsiveContainer>\n        <PieChart>\n        <Pie\n          data={readingData}\n          dataKey={'value'} \n          //innerRadius={60}\n          outerRadius='100%' \n          fill=\"#8884d8\"\n          //endAngle={180}\n          labelLine={false}\n          label={renderCustomizedLabel}\n          //paddingAngle={5}\n        >\n        \t{\n          \treadingData.map((entry, index) => <Cell key={\"rc-\" + index} fill={COLORS[index % COLORS.length]}/>)\n          }\n        </Pie>\n        <Tooltip />\n        <Legend verticalAlign=\"bottom\" height={20}/>\n      </PieChart>\n      </ResponsiveContainer>\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport { PieChart, Pie, Cell, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport Title from '../Title';\n\nimport { useRecoilValue } from 'recoil';\nimport { rosterState } from '../atoms/rosterAtom';\n\nconst COLORS = ['#FF3032',   // less than 2\n                '#FFBB28',  // 2\n                '#00C49F',  // 2+\n                '#0088FE']; // 3\n\nconst RADIAN = Math.PI / 180;\nconst renderCustomizedLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent, index }) => {\n \tconst radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n    const x  = cx + radius * Math.cos(-midAngle * RADIAN);\n    const y = cy  + radius * Math.sin(-midAngle * RADIAN);\n\n    //don't put a lable on empty data sets\n    if(percent === 0){\n        return (<></>);\n    }\n \n  return (\n    <text x={x} y={y} fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n    \t{`${(percent * 100).toFixed(0)}%`}\n    </text>\n  );\n};\n/**\n * \n * @param {Object<Linguist>} roster \n * @returns Data scoreBuckets  \n * \n * iterates over roster, extracts scores and saves increments returns an objectArray\n * of scores totaled into a histogram of scores\n */\nconst totalScores = (roster = {}) => {\n    \n    // declare the shape of the histogram and it's buckets\n    let scoreBuckets = [\n        {name: 'SubPro', value: 0},\n        {name: '2', value: 0},\n        {name: '2+', value: 0},\n        {name: '3 or Higher', value: 0}];\n    \n    // don't try any of this if there isn't any linguists on the roster\n    if( Object.entries(roster).length > 0 ){\n\n        // iterate over the array \n        for(var linguist in roster) { // here linguist is the roster key for each linguist\n            \n            // verify that there is a reading score for the lingusit\n            if(roster[linguist].attributes?.hasOwnProperty(\"listening\")){\n\n                // set reading score make sure that score is typed as a Number to facilitate comparision\n                let listeningScore = Number(roster[linguist].attributes.listening.value);\n                \n                //increment the correct score bucket\n                if(listeningScore < 2){\n                    scoreBuckets[0].value++;\n                }else if(listeningScore === 2){\n                    scoreBuckets[1].value++;\n                }else if(listeningScore > 2 && listeningScore < 3){\n                    scoreBuckets[2].value++;\n                }else if(listeningScore > 2.5){\n                    scoreBuckets[3].value++;\n                }\n            }\n        }\n  }\n  \n  return scoreBuckets;\n}\n\nexport default function ListeningScoresChart() {\n\n  const roster = useRecoilValue(rosterState);\n\n  const listeningData = totalScores(roster);\n\n  return (\n    <React.Fragment>\n      <Title>Listening</Title>\n      <ResponsiveContainer>\n        <PieChart>\n        <Pie\n          data={listeningData}\n          dataKey={'value'}  \n          //innerRadius={60}\n          outerRadius='100%' \n          fill=\"#8884d8\"\n          //endAngle={180}\n          labelLine={false}\n          label={renderCustomizedLabel}\n          //paddingAngle={5}\n        >\n        \t{\n          \tlisteningData.map((entry, index) => <Cell key={\"lc-\" + index} fill={COLORS[index % COLORS.length]}/>)\n          }\n        </Pie>\n        <Tooltip />\n        <Legend verticalAlign=\"bottom\" height={20}/>\n      </PieChart>\n      </ResponsiveContainer>\n    </React.Fragment>\n  );\n}\n","import React, {useState, useEffect} from 'react';\nimport { ButtonGroup, Button } from '@material-ui/core';\n\ntype LedgerProps = {\n    ledgerRows: {\n        [index: string]: {\n            timestamp: string,\n            trainingHours: string,\n        };\n    },\n}\n\nenum Period {\n    'ALL_TIME',\n    'THIS_MONTH'\n}\n/**\n * This component accepts a set of ledger rows and displays the total number of hours\n * based upon the period selected (this month, or all time). \n * \n * @param ledgerRows<LedgerObject> \n * @returns JSX React.Fragment \n */\nconst LinguistLanguageHours = ({ ledgerRows = {} } : LedgerProps) => {\n\n    //initalize the total hours \n    const [hours, setHours] = useState(0);\n\n    //initialize the period over which we will sum the language hours from the ledger\n    const [period, setPeriod] = useState(Period.ALL_TIME);\n\n    // determine if any rows have been passed\n    const ledgerHasRows: boolean = Object.keys(ledgerRows).length > 0 ? true : false;\n\n    /**\n     * Handler function which responds when the user clicks buttons to select \n     * period of time over which to total hours\n     * @param p<Period>\n     */\n    const setPeriodButtonHandler = (p : Period) => {\n        // Set the period state (using the useState hook)\n        setPeriod(p);\n    }\n\n\n    useEffect(()=> {\n        if(!ledgerHasRows){\n             setHours(0);\n         }\n\n        let currentMonth = new Date().getMonth();\n        let total = 0;\n        for (const row in ledgerRows) {\n            let rowMonth = new Date(ledgerRows[row].timestamp).getMonth();  \n            if(period === Period.ALL_TIME || currentMonth === rowMonth){\n                if(ledgerRows[row].hasOwnProperty(\"trainingHours\")){\n                    total += Number(ledgerRows[row].trainingHours);\n                }\n            }\n        }\n        \n        setHours(total);\n\n    }, [ledgerRows, period, setHours, ledgerHasRows])\n\n    return(\n        <React.Fragment>\n            <h3 style={{fontSize: '3rem', marginTop: '0px'}}>{hours}</h3> \n            <ButtonGroup fullWidth size=\"small\" variant=\"contained\" aria-label=\"contained primary button group\">\n                <Button \n                    style={{fontSize: '.7rem'}} \n                    color={period === Period.THIS_MONTH ? \"primary\" : \"default\"}\n                    onClick={() => setPeriodButtonHandler(Period.THIS_MONTH)}>\n                        This Month\n                </Button>\n                <Button \n                    style={{fontSize: '.7rem'}} \n                    color={period === Period.ALL_TIME ? \"primary\" : \"default\"}\n                    onClick={() => setPeriodButtonHandler(Period.ALL_TIME)}>\n                        All Time\n                </Button>\n            </ButtonGroup>\n        </React.Fragment>\n    );\n}\n\nexport default LinguistLanguageHours;","import React from 'react';\nimport { BarChart,\n         Bar,\n         XAxis,\n         YAxis, \n         CartesianGrid, \n         Tooltip, \n         Legend, \n         ResponsiveContainer} from 'recharts';\nimport moment from 'moment';\nimport Title from '../Title';\nimport { ledgerState } from '../atoms/ledgerAtom';\nimport { useRecoilValue } from 'recoil';\n\ntype LedgerRows = {\n    [index: string]: {\n        timestamp: string,\n        trainingHours: string,\n        reading: string,\n        listening: string,\n    }\n}\n\n\ntype ChartProps = {\n    ledgerRows: LedgerRows,\n    buckets: Number,\n}\n\ntype Bucket = {\n    hours: number,\n    month: string, // the month\n}\n\n\n\n/**\n * Creates the bar chart on the main dashbord page.  Totals up the hours from\n * all ledger rows and puts them in to buckets of the last six months (this \n * can be adjusted by passing a buckets property.)\n * \n * @param param ChartProps\n */\nconst LanguageHoursChart = ({ buckets = 6}: ChartProps) => {\n    \n    // Use recoil to pull the full ledger state\n    // TODO -- TypeScript is being dificult would love it \n    // if i didn't cop-out with casting 'any' type.\n    const ledgerRows: any = useRecoilValue(ledgerState);\n    \n    // initialize an array of data buckets\n    let hourBuckets: Bucket[] = [];\n\n    // create n data buckets where n is the number specified by the buckets property\n    for(let i = 0; i < buckets; i++){\n        let bucket = {hours: 0, month: moment().subtract(i, 'months').format(\"MMM YY\")};\n        hourBuckets.push(bucket);\n    }\n       \n    // iterate over the ledger rows (if there are any) \n    if(ledgerRows.length > 0) {\n        for (const row in ledgerRows) {\n            \n            // for expediency put the row data into a temp var\n            let data = ledgerRows[row].data;\n            \n            // check to see if the row has training hours\n            if(data.trainingHours !== \"\" && data.trainingHours !== 0){\n                \n                // using date get the month year (we used this to name the buckets)\n                let rowMonth = moment(data.timestamp).format(\"MMM YY\"); \n                \n                // iterate over the buckets to see if the current row's data fits\n                hourBuckets = hourBuckets.map((bucket: Bucket) => {\n                \n                    // if the bucket month (the data label) and the rowMonth match, \n                    // then that data belongs in this bucket\n                    if(bucket.month === rowMonth){\n\n                        // put add the row's language hours of the bucket\n                        bucket.hours += parseInt(data.trainingHours);\n                    }\n\n                    // return bucket to map function\n                    return bucket;\n                 });\n               \n            }\n            \n        }\n    }\n\n    return(\n        <React.Fragment>\n            <Title>Unit Trainig Hours</Title>\n            <ResponsiveContainer>\n                <BarChart data={hourBuckets}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis reversed={true} dataKey=\"month\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Bar dataKey=\"hours\" fill=\"#8884db\" />\n                </BarChart>\n            </ResponsiveContainer>\n        </React.Fragment>\n    );\n}\n\nexport default LanguageHoursChart;","import React from 'react';\nimport clsx from 'clsx';\nimport useStyles from '../styles/styles'\nimport { Grid,\n         Paper,\n         } from '@material-ui/core/';\nimport RecentLedgerUpdates from  './RecentLedgerUpdates';\nimport ReadingScoresChart from './ReadingScoresChart';\nimport ListeningScoresChart from './ListeningScoresChart';\nimport LanguageHoursChart from './LanguageHoursChart';\n\n\nconst HomeScreen = () => {\n    const classes = useStyles();\n    const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n    return (\n        <Grid container spacing={3}>\n        {/* Chart */}\n        <Grid item xs={12} md={4} lg={6}>\n          <Paper className={fixedHeightPaper}>\n              <LanguageHoursChart />\n          </Paper>\n        </Grid>\n        {/* Recent Deposits */}\n        <Grid item xs={12} md={4} lg={3}>\n          <Paper className={fixedHeightPaper}>\n            <ReadingScoresChart />\n          </Paper>\n        </Grid>\n        <Grid item xs={12} md={4} lg={3}>\n          <Paper className={fixedHeightPaper}>\n            <ListeningScoresChart />\n          </Paper>\n        </Grid>\n        {/* Recent Recent Ledger Updates */}\n        <Grid item xs={12}>\n          <Paper className={classes.paper}>\n            <RecentLedgerUpdates />\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n};\n\nexport default HomeScreen;","import moment from 'moment';\ntype LedgerRow = {\n    [index: string]: {\n        timestamp: string,\n        firstName: string,\n        lastName: string,\n        languageHours: string,\n        \n    }\n}\n\nexport class Linguist {\n    public name: string = \"\";\n    public key: string = \"\";\n    public attributes: {\n       [index: string]: {\n           value: string,\n           date: number, //unix time to facilitate quick comparisons/sorting\n       }; \n    } = {};\n    public ledgerRows: any[] = [];\n\n    \n    public constructor(key: string = \"\") {\n        this.key = key;        \n    }\n\n    public setName(name: string = \"\"){\n        this.name = name;\n    }\n\n    public setLedger(rows: [] = []){\n        this.ledgerRows = rows;\n    }\n\n    public appendToLedger(row: any){\n        this.ledgerRows.push(row);\n        this.extractAttributesFromRow(row);\n    }\n    \n    public setAttributes(attribs: {}){\n        this.attributes = attribs;\n    }\n\n    public setAttribute(key: string, value: string, date: number){\n        \n        this.attributes[key]  = {value: value, date: date};\n    }\n\n    extractAttributesFromRow(row: LedgerRow): void{\n        let omitAttribs = ['timestamp', 'firstName', 'lastName'];        \n        for (const attrib in row) {\n            if(!omitAttribs.includes(attrib)){\n                if(row[attrib]){\n                    let rowTimestamp = moment(row['timestamp'].toString()).unix(); \n                    if(this.attributes[attrib] == undefined || \n                       rowTimestamp > this.attributes[attrib].date){\n                            this.attributes[attrib] = { \n                                value: row[attrib].toString(), \n                                date: rowTimestamp,\n                            };\n                    }   \n                }\n            }\n        }\n    }\n\n    \n}","export {};\n\nexport const toUrl =  function (text: String): String{\n    let str = text.toString().toLowerCase();\n    return str.replace(/\\s+/g, '-');\n}\n","import React, { useEffect, useState } from 'react';\nimport { CSVReader } from 'react-papaparse'\nimport { useRecoilState } from 'recoil';\nimport { nanoid } from 'nanoid';\nimport { ledgerState } from '../atoms/ledgerAtom';\nimport { rosterState } from '../atoms/rosterAtom';\nimport { Linguist } from '../classes/Linguist';\nimport { toUrl } from '../utility/utilities';\n\nconst LoadLedger = () => {\n\n    const [ledger, setLedger] = useRecoilState(ledgerState);\n    const [roster, setRoster] = useRecoilState(rosterState);\n\n    const [loadedData, setLoadedData] = useState([]);\n\n\n    useEffect(() => {\n      if(loadedData.length > 0){\n        setLedger(loadedData);\n      }\n    }, [loadedData, setLedger]);\n\n    //console.log(ledger);\n\n    const handleOnDrop = (data) => {\n\n        // iterate over data to add a unique id to each ledger row\n        data.forEach((row) => row.id = nanoid(10));\n        setLoadedData(data);\n        setRoster(buildRoster(data));\n      }\n    \n    const handleOnError = (err, file, inputElem, reason) => {\n        console.log(err)\n      }\n    \n    const handleOnRemoveFile = (data) => {\n        console.log('---------------------------')\n        console.log(data)\n        console.log('---------------------------')\n      }\n    \n    return (\n        <div>\n        <h1>Load Ledger</h1>\n        <CSVReader\n          onDrop={handleOnDrop}\n          onError={handleOnError}\n          addRemoveButton\n          onRemoveFile={handleOnRemoveFile}\n          config={{header: true}}\n        >\n          <span>Drop CSV file here or click to upload.</span>\n        </CSVReader>\n        <h3>{Object.keys(loadedData).length} ledger rows ingested</h3>\n        <h3>{Object.keys(roster).length} linguists on the roster</h3>\n        </div>\n    );\n};\n/**\n * \n * @param {Array<Linguists>} dataArray\n * iterates over parsed data of linguists and assigns them to an array of linguists\n *  builds key from first and last name of passed data\n */\nconst buildRoster = (dataArray) => {\n  let roster = {}; //declare a new roster object\n  \n  //iterate over the data\n  // TODO: maybe refactor as a forEach to placate eslint\n  // eslint-disable-next-line array-callback-return\n  dataArray.map((row) => {\n\n\n    // Test to make sure the row is well formed with at least first/last name -- ignore if empty\n    // malformed rows tend to happen at the end of a CSV document\n    if(!row.data.hasOwnProperty(\"firstName\") || !row.data.hasOwnProperty(\"lastName\")){\n        return (<></>);\n    }\n    // create a name from the row this will be used to key the roster \n    let name = row.data['firstName'] +\" \" +row.data['lastName'];\n\n    //use helper function from utilities to create a key/slug that is url friendly\n    let key = toUrl(name);\n\n    //if the name is not in the roster then add it\n    if(!Object.keys(roster).includes(key)){\n        let linguist = new Linguist(key); // create a new linguist\n      \n        linguist.setName(name); //assign name (top-level value with own getter/setter)\n\n        // add the ledger row to the linguist -- this also triggers private linguist method\n        // to parse out attributes within that appened ledger row\n        linguist.appendToLedger(row.data); \n\n        roster[key] = linguist; // add the lingusit to the roster\n    \n    }else{ //else, the linguist is already on the roster\n        \n        //append the row to the linguist\n        roster[key].appendToLedger(row.data);\n    }\n  });\n  return roster;\n};\n\n\n\nexport default LoadLedger;","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\n\nconst LinguistHistory = ({ ledgerRows = {} } : any) => {\n\n    const ledgerHasRows: boolean = Object.keys(ledgerRows).length > 0 ? true : false;\n\n    return(\n        <React.Fragment>\n            <Table size=\"small\" >\n                    <TableHead>\n                    <TableRow>\n                        <TableCell style={{fontWeight: 'bold'}}>Name</TableCell>\n                        <TableCell style={{fontWeight: 'bold'}}>Reading</TableCell>\n                        <TableCell style={{fontWeight: 'bold'}}>Listening</TableCell>\n                        <TableCell style={{fontWeight: 'bold'}}>Hours</TableCell>\n                        <TableCell style={{fontWeight: 'bold'}}>Next SLTE</TableCell>\n                    </TableRow>\n                    </TableHead>\n                    <TableBody>\n                \n                {ledgerHasRows && ledgerRows.map((row : any) => (\n                    \n                    <TableRow key={row.timestamp}>\n                        <TableCell>{row.timestamp}</TableCell>\n                        <TableCell>{row['listening']}</TableCell>\n                        <TableCell>{row['reading']}</TableCell>\n                        <TableCell>{row['trainingHours']}</TableCell>\n                        <TableCell>{row['nextSLTE']}</TableCell>\n                    </TableRow>\n                ))}\n                    </TableBody>\n                    </Table>\n        </React.Fragment>\n    );\n}\n\nexport default LinguistHistory;","import React from 'react';\nimport { ScatterChart, \n         Scatter, \n         XAxis, \n         YAxis, \n         CartesianGrid, \n         Tooltip, \n         Legend, \n         ResponsiveContainer, } from 'recharts';\nimport moment from 'moment';\nimport {ScoreDatum, LedgerProps} from '../types/LinguistBoardTypes';\n\n/**\n * Given a list of ledger Rows this component uses recharts library to display\n * both the reading and listening scores found in the ledgerRows and plots them\n * in a scatter chart with connecting lines.\n * @param ledgerRows -- passed objectArray of ledgerRow objects from parent component\n */\nconst LinguistHistoryChart = ({ ledgerRows = {} } : LedgerProps) => {\n\n    // initialize the listening and reading data arrays as arrays of Score Datums\n    // {score: string, date: Number (unix timestamp) }\n    let listeningData: ScoreDatum[] = [];\n    let readingData: ScoreDatum[] = [];\n\n    // iterate over the ledger rows\n    for (const row in ledgerRows) {\n    \n        // if the row has the reading prop and it's not empty then...\n        if(ledgerRows[row].hasOwnProperty(\"reading\") && ledgerRows[row].reading !== \"\"){\n            // init and format a unix timestamp from the row (row times can be whatever \n            // spreadsheet software use as format.  As long as it's resonable moment should\n            // be able to turn it into a unix timestamp.\n            let unixTime = moment(ledgerRows[row].timestamp).unix();\n            readingData.push({score: ledgerRows[row].reading, date: unixTime});\n        }\n\n        // it is possible (and likely) that one row contains both listening & reading prop.\n        // if the row has the listening prop and it's not empty then ... \n        if(ledgerRows[row].hasOwnProperty(\"listening\") && ledgerRows[row].listening !== \"\"){\n            let unixTime = moment(ledgerRows[row].timestamp).unix();\n            listeningData.push({score: ledgerRows[row].listening, date: unixTime});\n        }\n    }\n   \n    // Return a React Fragment to render\n    return (\n          <React.Fragment>\n            <ResponsiveContainer>\n                <ScatterChart >\n                <CartesianGrid  />\n                <XAxis\n                        type=\"number\"  // unix timestamp\n                        dataKey={'date'} \n                        name='Date' \n                        domain = {['auto', 'auto']} \n                        // tickFormater turns the timestamp into something more readable when \n                        // rendered on axis\n                        tickFormatter = {(datetime) => moment.unix(datetime).format('MMM YY')} />\n                <YAxis type=\"number\" dataKey={'score'} name='Score' domain={[0, 5]} ticks={[.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5]} />\n                <Legend/>\n                <Tooltip  formatter={(value, name) => { // iterates over x and y values \n                        if(name === 'Date'){ // if the name is Date -- format to human\n                            return (moment.unix(Number(value)).format('MMM YY'));\n                        }else{\n                            return value; // else (the score acess), just return value\n                        }   \n                    }}/>\n                <Scatter name='Reading' data={readingData} fill='#FF2211' line shape=\"circle\"/>\n                <Scatter name='Listening' data={listeningData} fill='#1122FF' line shape=\"circle\" />\n                </ScatterChart>\n            </ResponsiveContainer>\n        </React.Fragment>\n    );\n}\n\nexport default LinguistHistoryChart;","/* eslint-disable array-callback-return */\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Paper, Grid } from '@material-ui/core';\nimport { useRecoilValue } from 'recoil';\nimport { rosterState } from '../atoms/rosterAtom';\nimport clsx from 'clsx';\nimport useStyles from '../styles/styles'\nimport LinguistHistory from '../components/LinguistHistory';\nimport LinguistLanguageHours from '../components/LinguistLanguageHours';\nimport LinguistHistoryChart from '../components/LinguistHistoryChart';\n\n\nconst Linguist = () => {\n    const classes = useStyles();\n    let { linguistKey } = useParams();\n    const roster = useRecoilValue(rosterState);\n    let linguistNotFound = false;\n    let linguist = {};\n\n    const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n\n    if(roster.hasOwnProperty(linguistKey)){\n        linguist = roster[linguistKey];\n    }else{\n        linguistNotFound = true;\n    }\n    \n    return(\n            <React.Fragment>\n            {linguistNotFound &&\n                <h1>Linguist not found</h1>\n            }\n            {!linguistNotFound &&\n                <h1>{linguist.name}</h1>}\n\n             <Grid container spacing={3}>\n                {/* Score history chart */}\n                <Grid item xs={12} md={4} lg={6}>\n                <Paper className={fixedHeightPaper}>\n                    <LinguistHistoryChart ledgerRows={linguist.ledgerRows} />\n                </Paper>\n                </Grid>\n                {/* Scores */}\n                <Grid item xs={12} md={4} lg={3}>\n                <Paper className={fixedHeightPaper}>\n                    <h3>Current Scores</h3>\n                    <h2 style={{fontSize: '2rem'}}>\n                        {!linguistNotFound && linguist.attributes.reading.value ? \"R\" + linguist.attributes.reading.value : \"-\"}{\", \"} \n                        {!linguistNotFound && linguist.attributes.listening.value ? \"L\"+ linguist.attributes.listening.value: \"-\"}\n                    </h2>\n                </Paper>\n                </Grid>\n                <Grid item xs={12} md={4} lg={3}>\n                <Paper className={fixedHeightPaper}>\n                    <h3>Lanugage Hours</h3>\n                    <LinguistLanguageHours ledgerRows={linguist.ledgerRows}/>\n                </Paper>\n                </Grid>\n                <Grid item xs={12} md={12} lg={12}>\n                    <Paper>\n                        <LinguistHistory ledgerRows={linguist.ledgerRows} />\n                    </Paper>\n                </Grid>\n            </Grid>\n\n       </React.Fragment>);\n}\n\nexport default Linguist;","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport useStyles from '../styles/styles';\nimport { useRecoilValue } from 'recoil';\nimport { rosterState } from '../atoms/rosterAtom';\nimport { Link } from 'react-router-dom';\nimport { toUrl } from '../utility/utilities';\n\nconst Roster = () => {\n    const classes = useStyles();\n    const roster = useRecoilValue(rosterState);\n\n    const isRoster = Object.entries(roster).length === 0 ? false: true;\n\n    if(isRoster){\n        console.log(roster);\n    }\n\n    return (\n        <div>\n            <h1>Roster</h1>\n        <Table size=\"small\" className={classes.table}>\n        <TableHead>\n          <TableRow>\n            <TableCell style={{fontWeight: 'bold'}}>Name</TableCell>\n            <TableCell style={{fontWeight: 'bold'}}>Reading</TableCell>\n            <TableCell style={{fontWeight: 'bold'}}>Listening</TableCell>\n            <TableCell style={{fontWeight: 'bold'}}>Hours</TableCell>\n            <TableCell style={{fontWeight: 'bold'}}>Next SLTE</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {isRoster && Object.keys(roster).map((key) => (\n            <TableRow key={key}>\n                <TableCell><Link to={`linguist/${toUrl(key)}`}>{roster[key].name}</Link></TableCell>\n                <TableCell>\n                    { \n                      roster[key].attributes?.reading?.value ?\n                      roster[key].attributes.reading.value : \"-\"\n                    }\n                </TableCell>\n                <TableCell>\n                    { \n                      roster[key].attributes?.listening?.value ? \n                      roster[key].attributes.listening.value : \"-\" \n                    }\n                </TableCell>\n                <TableCell>\n                    { \n                      roster[key].attributes?.trainingHours?.value ? \n                      roster[key].attributes.trainingHours.value : \"-\"\n                    }\n                  </TableCell>\n                <TableCell>\n                  {\n                    roster[key].attributes?.nextSLTE?.value ? \n                    roster[key].attributes.nextSLTE.value : \"-\"\n                  }\n                </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n        </div>\n    );\n};\n\n\nexport default Roster;","import React from 'react';\n//import clsx from 'clsx';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport SideNavigation from '../components/SideNavigation';\nimport HeaderBar from '../components/HeaderBar';\nimport useStyles from '../styles/styles';\nimport HomeScreen from '../components/HomeScreen';\nimport { HashRouter, Switch, Route, Link } from 'react-router-dom';\nimport LoadLedger from './LoadLedger';\nimport Linguist from './Linguist';\nimport Roster from './Roster';\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n           Linguist Dashboard -\n      \n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nexport default function Dashboard() {\n  const classes = useStyles();\n  //const [open, setOpen] = React.useState(true);\n  // const handleDrawerOpen = () => {\n  //   setOpen(true);\n  // };\n  // const handleDrawerClose = () => {\n  //   setOpen(false);\n  // };\n  //const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n\n  return (\n    <HashRouter>\n    <div className={classes.root}>\n      <CssBaseline />\n        <HeaderBar />\n      <SideNavigation />\n      <main className={classes.content}>\n        <div className={classes.appBarSpacer} />\n        <Container maxWidth=\"lg\" className={classes.container}>\n            <Switch>\n              <Route path=\"/load\">\n                <LoadLedger />\n              </Route>\n              <Route path=\"/roster\">\n                <Roster />\n              </Route>\n              <Route path=\"/linguist/:linguistKey\">\n                <Linguist />\n              </Route>\n              <Route\n                path=\"/\">\n                <HomeScreen />\n              </Route>\n            </Switch>\n          <Box pt={4}>\n            <Copyright />\n          </Box>\n        </Container>\n      </main>\n    </div>\n    </HashRouter>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport Dashboard from './screens/Dashboard';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  RecoilRoot,\n} from 'recoil';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  rootElement\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}